[Warning]: Dependency sources are no longer verified automatically during publication and upgrade, so the `--skip-dependency-verification` flag is no longer necessary.
INCLUDING DEPENDENCY futarchy_specialized_actions
INCLUDING DEPENDENCY futarchy_multisig
INCLUDING DEPENDENCY futarchy_vault
INCLUDING DEPENDENCY AccountActions
INCLUDING DEPENDENCY Kiosk
INCLUDING DEPENDENCY futarchy_core
INCLUDING DEPENDENCY AccountProtocol
INCLUDING DEPENDENCY AccountExtensions
INCLUDING DEPENDENCY futarchy_markets
INCLUDING DEPENDENCY futarchy_one_shot_utils
INCLUDING DEPENDENCY Bridge
INCLUDING DEPENDENCY SuiSystem
INCLUDING DEPENDENCY Sui
INCLUDING DEPENDENCY MoveStdlib
BUILDING futarchy_lifecycle
[0m[1m[38;5;11mwarning[W01004][0m[1m: invalid documentation comment[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../futarchy_markets/sources/spot/spot_oracle_interface.move:199:1
    [0m[34mâ”‚[0m  
[0m[34m199[0m [0m[34mâ”‚[0m [0m[33mâ•­[0m [0m[33m/// Example: How a lending protocol would use this[0m
[0m[34m200[0m [0m[34mâ”‚[0m [0m[33mâ”‚[0m [0m[33m/// [0m
[0m[34m201[0m [0m[34mâ”‚[0m [0m[33mâ”‚[0m [0m[33m/// ```move[0m
[0m[34m202[0m [0m[34mâ”‚[0m [0m[33mâ”‚[0m [0m[33m/// // In lending protocol[0m
    [0m[34mÂ·[0m [0m[33mâ”‚[0m
[0m[34m217[0m [0m[34mâ”‚[0m [0m[33mâ”‚[0m [0m[33m/// [0m
[0m[34m218[0m [0m[34mâ”‚[0m [0m[33mâ”‚[0m [0m[33m/// It just gets a continuous price feed that never stops.[0m
    [0m[34mâ”‚[0m [0m[33mâ•°[0m[0m[33mâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€^ Documentation comment cannot be matched to a language item[0m

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:6:27
  [0m[34mâ”‚[0m
[0m[34m6[0m [0m[34mâ”‚[0m use std::option::{Self as [0m[33moption[0m, Option};
  [0m[34mâ”‚[0m                           [0m[33m^^^^^^[0m [0m[33mUnnecessary alias 'option' for module 'std::option'. This alias is provided by default[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:6:35
  [0m[34mâ”‚[0m
[0m[34m6[0m [0m[34mâ”‚[0m use std::option::{Self as option, [0m[33mOption[0m};
  [0m[34mâ”‚[0m                                   [0m[33m^^^^^^[0m [0m[33mUnnecessary alias 'Option' for module member 'std::option::Option'. This alias is provided by default[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:7:10
  [0m[34mâ”‚[0m
[0m[34m7[0m [0m[34mâ”‚[0m use std::[0m[33mvector[0m;
  [0m[34mâ”‚[0m          [0m[33m^^^^^^[0m [0m[33mUnnecessary alias 'vector' for module 'std::vector'. This alias is provided by default[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:13:19
   [0m[34mâ”‚[0m
[0m[34m13[0m [0m[34mâ”‚[0m use sui::object::{[0m[33mSelf[0m, UID, ID};
   [0m[34mâ”‚[0m                   [0m[33m^^^^[0m [0m[33mUnnecessary alias 'object' for module 'sui::object'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:13:25
   [0m[34mâ”‚[0m
[0m[34m13[0m [0m[34mâ”‚[0m use sui::object::{Self, [0m[33mUID[0m, ID};
   [0m[34mâ”‚[0m                         [0m[33m^^^[0m [0m[33mUnnecessary alias 'UID' for module member 'sui::object::UID'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:13:30
   [0m[34mâ”‚[0m
[0m[34m13[0m [0m[34mâ”‚[0m use sui::object::{Self, UID, [0m[33mID[0m};
   [0m[34mâ”‚[0m                              [0m[33m^^[0m [0m[33mUnnecessary alias 'ID' for module member 'sui::object::ID'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:14:22
   [0m[34mâ”‚[0m
[0m[34m14[0m [0m[34mâ”‚[0m use sui::tx_context::[0m[33mTxContext[0m;
   [0m[34mâ”‚[0m                      [0m[33m^^^^^^^^^[0m [0m[33mUnnecessary alias 'TxContext' for module member 'sui::tx_context::TxContext'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09011][0m[1m: unused constant[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:31:7
   [0m[34mâ”‚[0m
[0m[34m31[0m [0m[34mâ”‚[0m const [0m[33mENotUSDC[0m: u64 = 12;
   [0m[34mâ”‚[0m       [0m[33m^^^^^^^^[0m [0m[33mThe constant 'ENotUSDC' is never used. Consider removing it.[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_const)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:266:8
    [0m[34mâ”‚[0m
[0m[34m266[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun create_raise_with_founder_rewards<RaiseToken: drop, StableCoin: drop>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:316:9
    [0m[34mâ”‚[0m
[0m[34m316[0m [0m[34mâ”‚[0m     let [0m[33mtokens_for_sale_amount[0m = if (with_founder_rewards) {
    [0m[34mâ”‚[0m         [0m[33m^^^^^^^^^^^^^^^^^^^^^^[0m [0m[33mUnused local variable 'tokens_for_sale_amount'. Consider removing or prefixing with an underscore: '_tokens_for_sale_amount'[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:343:8
    [0m[34mâ”‚[0m
[0m[34m343[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun create_raise<RaiseToken: drop, StableCoin: drop>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:384:8
    [0m[34mâ”‚[0m
[0m[34m384[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun contribute_with_cap<RaiseToken, StableCoin>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:448:8
    [0m[34mâ”‚[0m
[0m[34m448[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun contribute<RaiseToken, StableCoin>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:460:8
    [0m[34mâ”‚[0m
[0m[34m460[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun update_cap<RaiseToken, StableCoin>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09008][0m[1m: unused function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:512:5
    [0m[34mâ”‚[0m
[0m[34m512[0m [0m[34mâ”‚[0m fun [0m[33mparent[0m(i: u64): u64 { if (i == 0) 0 else (i - 1) / 2 }
    [0m[34mâ”‚[0m     [0m[33m^^^^^^[0m [0m[33mThe non-'public', non-'entry' function 'parent' is never called. Consider removing it.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(unused_function)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:596:8
    [0m[34mâ”‚[0m
[0m[34m596[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun crank_settlement<RT, SC>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:675:8
    [0m[34mâ”‚[0m
[0m[34m675[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun start_settlement<RT, SC>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:685:8
    [0m[34mâ”‚[0m
[0m[34m685[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun complete_settlement<RT, SC>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:694:8
    [0m[34mâ”‚[0m
[0m[34m694[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun claim_success_and_create_dao<RaiseToken: drop, StableCoin: drop>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:784:8
    [0m[34mâ”‚[0m
[0m[34m784[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun claim_tokens<RaiseToken, StableCoin>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:832:8
    [0m[34mâ”‚[0m
[0m[34m832[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun claim_refund_ineligible<RaiseToken, StableCoin>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:868:8
    [0m[34mâ”‚[0m
[0m[34m868[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun claim_refund<RaiseToken, StableCoin>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:917:8
    [0m[34mâ”‚[0m
[0m[34m917[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun sweep_dust<RaiseToken, StableCoin>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W04037][0m[1m: deprecated usage[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:973:38
    [0m[34mâ”‚[0m
[0m[34m973[0m [0m[34mâ”‚[0m         raise_token_type: type_name::[0m[33mget[0m<RaiseToken>().into_string().to_string(),
    [0m[34mâ”‚[0m                                      [0m[33m^^^[0m [0m[33mThe function 'std::type_name::get' is deprecated: Renamed to `with_defining_ids` for clarity.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(deprecated_usage)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W04037][0m[1m: deprecated usage[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:974:38
    [0m[34mâ”‚[0m
[0m[34m974[0m [0m[34mâ”‚[0m         stable_coin_type: type_name::[0m[33mget[0m<StableCoin>().into_string().to_string(),
    [0m[34mâ”‚[0m                                      [0m[33m^^^[0m [0m[33mThe function 'std::type_name::get' is deprecated: Renamed to `with_defining_ids` for clarity.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(deprecated_usage)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W04037][0m[1m: deprecated usage[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:1019:38
     [0m[34mâ”‚[0m
[0m[34m1019[0m [0m[34mâ”‚[0m         raise_token_type: type_name::[0m[33mget[0m<RaiseToken>().into_string().to_string(),
     [0m[34mâ”‚[0m                                      [0m[33m^^^[0m [0m[33mThe function 'std::type_name::get' is deprecated: Renamed to `with_defining_ids` for clarity.[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(deprecated_usage)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W04037][0m[1m: deprecated usage[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:1020:38
     [0m[34mâ”‚[0m
[0m[34m1020[0m [0m[34mâ”‚[0m         stable_coin_type: type_name::[0m[33mget[0m<StableCoin>().into_string().to_string(),
     [0m[34mâ”‚[0m                                      [0m[33m^^^[0m [0m[33mThe function 'std::type_name::get' is deprecated: Renamed to `with_defining_ids` for clarity.[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(deprecated_usage)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad_rewards.move:5:10
  [0m[34mâ”‚[0m
[0m[34m5[0m [0m[34mâ”‚[0m use std::[0m[33mvector[0m;
  [0m[34mâ”‚[0m          [0m[33m^^^^^^[0m [0m[33mUnnecessary alias 'vector' for module 'std::vector'. This alias is provided by default[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad_rewards.move:6:19
  [0m[34mâ”‚[0m
[0m[34m6[0m [0m[34mâ”‚[0m use std::option::{[0m[33mSelf[0m, Option};
  [0m[34mâ”‚[0m                   [0m[33m^^^^[0m [0m[33mUnnecessary alias 'option' for module 'std::option'. This alias is provided by default[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad_rewards.move:6:25
  [0m[34mâ”‚[0m
[0m[34m6[0m [0m[34mâ”‚[0m use std::option::{Self, [0m[33mOption[0m};
  [0m[34mâ”‚[0m                         [0m[33m^^^^^^[0m [0m[33mUnnecessary alias 'Option' for module member 'std::option::Option'. This alias is provided by default[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad_rewards.move:6:25
  [0m[34mâ”‚[0m
[0m[34m6[0m [0m[34mâ”‚[0m use std::option::{Self, [0m[33mOption[0m};
  [0m[34mâ”‚[0m                         [0m[33m^^^^^^[0m [0m[33mUnused 'use' of alias 'Option'. Consider removing it[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad_rewards.move:9:22
  [0m[34mâ”‚[0m
[0m[34m9[0m [0m[34mâ”‚[0m use sui::tx_context::[0m[33mTxContext[0m;
  [0m[34mâ”‚[0m                      [0m[33m^^^^^^^^^[0m [0m[33mUnnecessary alias 'TxContext' for module member 'sui::tx_context::TxContext'. This alias is provided by default[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad_rewards.move:63:5
   [0m[34mâ”‚[0m
[0m[34m63[0m [0m[34mâ”‚[0m     [0m[33mctx[0m: &mut TxContext,
   [0m[34mâ”‚[0m     [0m[33m^^^[0m [0m[33mUnused parameter 'ctx'. Consider removing or prefixing with an underscore: '_ctx'[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W01004][0m[1m: invalid documentation comment[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../futarchy_core/sources/futarchy_config.move:1141:1
     [0m[34mâ”‚[0m  
[0m[34m1141[0m [0m[34mâ”‚[0m [0m[33mâ•­[0m [0m[33m/// Execute a proposal's intent with generic outcome type[0m
[0m[34m1142[0m [0m[34mâ”‚[0m [0m[33mâ”‚[0m [0m[33m/// Execute a proposal's intent with generic outcome type[0m
[0m[34m1143[0m [0m[34mâ”‚[0m [0m[33mâ”‚[0m [0m[33m/// This allows standard intents to work with any outcome type[0m
     [0m[34mâ”‚[0m [0m[33mâ•°[0m[0m[33mâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€^ Documentation comment cannot be matched to a language item[0m

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:10:14
   [0m[34mâ”‚[0m
[0m[34m10[0m [0m[34mâ”‚[0m     option::{[0m[33mSelf[0m, Option},
   [0m[34mâ”‚[0m              [0m[33m^^^^[0m [0m[33mUnnecessary alias 'option' for module 'std::option'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:10:20
   [0m[34mâ”‚[0m
[0m[34m10[0m [0m[34mâ”‚[0m     option::{Self, [0m[33mOption[0m},
   [0m[34mâ”‚[0m                    [0m[33m^^^^^^[0m [0m[33mUnnecessary alias 'Option' for module member 'std::option::Option'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:14:12
   [0m[34mâ”‚[0m
[0m[34m14[0m [0m[34mâ”‚[0m     coin::{[0m[33mSelf[0m, Coin, TreasuryCap},
   [0m[34mâ”‚[0m            [0m[33m^^^^[0m [0m[33mUnused 'use' of alias 'coin'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:16:14
   [0m[34mâ”‚[0m
[0m[34m16[0m [0m[34mâ”‚[0m     object::{[0m[33mSelf[0m, ID, UID},
   [0m[34mâ”‚[0m              [0m[33m^^^^[0m [0m[33mUnnecessary alias 'object' for module 'sui::object'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:16:20
   [0m[34mâ”‚[0m
[0m[34m16[0m [0m[34mâ”‚[0m     object::{Self, [0m[33mID[0m, UID},
   [0m[34mâ”‚[0m                    [0m[33m^^[0m [0m[33mUnnecessary alias 'ID' for module member 'sui::object::ID'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:16:24
   [0m[34mâ”‚[0m
[0m[34m16[0m [0m[34mâ”‚[0m     object::{Self, ID, [0m[33mUID[0m},
   [0m[34mâ”‚[0m                        [0m[33m^^^[0m [0m[33mUnnecessary alias 'UID' for module member 'sui::object::UID'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:19:5
   [0m[34mâ”‚[0m
[0m[34m19[0m [0m[34mâ”‚[0m     [0m[33mtransfer[0m,
   [0m[34mâ”‚[0m     [0m[33m^^^^^^^^[0m [0m[33mUnnecessary alias 'transfer' for module 'sui::transfer'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:23:21
   [0m[34mâ”‚[0m
[0m[34m23[0m [0m[34mâ”‚[0m     account::{Self, [0m[33mAccount[0m},
   [0m[34mâ”‚[0m                     [0m[33m^^^^^^^[0m [0m[33mUnused 'use' of alias 'Account'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:29:29
   [0m[34mâ”‚[0m
[0m[34m29[0m [0m[34mâ”‚[0m     futarchy_config::{Self, [0m[33mFutarchyConfig[0m, ConfigParams},
   [0m[34mâ”‚[0m                             [0m[33m^^^^^^^^^^^^^^[0m [0m[33mUnused 'use' of alias 'FutarchyConfig'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:29:45
   [0m[34mâ”‚[0m
[0m[34m29[0m [0m[34mâ”‚[0m     futarchy_config::{Self, FutarchyConfig, [0m[33mConfigParams[0m},
   [0m[34mâ”‚[0m                                             [0m[33m^^^^^^^^^^^^[0m [0m[33mUnused 'use' of alias 'ConfigParams'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:30:5
   [0m[34mâ”‚[0m
[0m[34m30[0m [0m[34mâ”‚[0m     [0m[33mdao_config[0m,
   [0m[34mâ”‚[0m     [0m[33m^^^^^^^^^^[0m [0m[33mUnused 'use' of alias 'dao_config'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:36:43
   [0m[34mâ”‚[0m
[0m[34m36[0m [0m[34mâ”‚[0m use futarchy_core::priority_queue::{Self, [0m[33mProposalQueue[0m};
   [0m[34mâ”‚[0m                                           [0m[33m^^^^^^^^^^^^^[0m [0m[33mUnused 'use' of alias 'ProposalQueue'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:39:31
   [0m[34mâ”‚[0m
[0m[34m39[0m [0m[34mâ”‚[0m     account_spot_pool::{Self, [0m[33mAccountSpotPool[0m},
   [0m[34mâ”‚[0m                               [0m[33m^^^^^^^^^^^^^^^[0m [0m[33mUnused 'use' of alias 'AccountSpotPool'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:140:8
    [0m[34mâ”‚[0m
[0m[34m140[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun create_dao<AssetType: drop, StableType>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W04037][0m[1m: deprecated usage[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:219:39
    [0m[34mâ”‚[0m
[0m[34m219[0m [0m[34mâ”‚[0m     let stable_type_name = type_name::[0m[33mget[0m<StableType>();
    [0m[34mâ”‚[0m                                       [0m[33m^^^[0m [0m[33mThe function 'std::type_name::get' is deprecated: Renamed to `with_defining_ids` for clarity.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(deprecated_usage)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:530:8
    [0m[34mâ”‚[0m
[0m[34m530[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun toggle_pause(factory: &mut Factory, cap: &FactoryOwnerCap) {
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:536:8
    [0m[34mâ”‚[0m
[0m[34m536[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun add_allowed_stable_type<StableType>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W04037][0m[1m: deprecated usage[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:543:36
    [0m[34mâ”‚[0m
[0m[34m543[0m [0m[34mâ”‚[0m     let type_name_val = type_name::[0m[33mget[0m<StableType>();
    [0m[34mâ”‚[0m                                    [0m[33m^^^[0m [0m[33mThe function 'std::type_name::get' is deprecated: Renamed to `with_defining_ids` for clarity.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(deprecated_usage)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:557:8
    [0m[34mâ”‚[0m
[0m[34m557[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun remove_allowed_stable_type<StableType>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W04037][0m[1m: deprecated usage[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:564:36
    [0m[34mâ”‚[0m
[0m[34m564[0m [0m[34mâ”‚[0m     let type_name_val = type_name::[0m[33mget[0m<StableType>();
    [0m[34mâ”‚[0m                                    [0m[33m^^^[0m [0m[33mThe function 'std::type_name::get' is deprecated: Renamed to `with_defining_ids` for clarity.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(deprecated_usage)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:577:8
    [0m[34mâ”‚[0m
[0m[34m577[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun burn_factory_owner_cap(factory: &Factory, cap: FactoryOwnerCap) {
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W04037][0m[1m: deprecated usage[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:599:36
    [0m[34mâ”‚[0m
[0m[34m599[0m [0m[34mâ”‚[0m     let type_name_val = type_name::[0m[33mget[0m<StableType>();
    [0m[34mâ”‚[0m                                    [0m[33m^^^[0m [0m[33mThe function 'std::type_name::get' is deprecated: Renamed to `with_defining_ids` for clarity.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(deprecated_usage)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W04037][0m[1m: deprecated usage[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:606:36
    [0m[34mâ”‚[0m
[0m[34m606[0m [0m[34mâ”‚[0m     let type_name_obj = type_name::[0m[33mget_with_original_ids[0m<T>();
    [0m[34mâ”‚[0m                                    [0m[33m^^^^^^^^^^^^^^^^^^^^^[0m [0m[33mThe function 'std::type_name::get_with_original_ids' is deprecated: Renamed to `with_original_ids` for clarity.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(deprecated_usage)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/dissolution/dissolution_actions.move:9:15
  [0m[34mâ”‚[0m
[0m[34m9[0m [0m[34mâ”‚[0m     balance::{[0m[33mSelf[0m, Balance},
  [0m[34mâ”‚[0m               [0m[33m^^^^[0m [0m[33mUnused 'use' of alias 'balance'. Consider removing it[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/dissolution/dissolution_actions.move:9:21
  [0m[34mâ”‚[0m
[0m[34m9[0m [0m[34mâ”‚[0m     balance::{Self, [0m[33mBalance[0m},
  [0m[34mâ”‚[0m                     [0m[33m^^^^^^^[0m [0m[33mUnused 'use' of alias 'Balance'. Consider removing it[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/dissolution/dissolution_actions.move:10:13
   [0m[34mâ”‚[0m
[0m[34m10[0m [0m[34mâ”‚[0m     object::[0m[33mID[0m,
   [0m[34mâ”‚[0m             [0m[33m^^[0m [0m[33mUnnecessary alias 'ID' for module member 'sui::object::ID'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/dissolution/dissolution_actions.move:11:5
   [0m[34mâ”‚[0m
[0m[34m11[0m [0m[34mâ”‚[0m     [0m[33mtransfer[0m,
   [0m[34mâ”‚[0m     [0m[33m^^^^^^^^[0m [0m[33mUnnecessary alias 'transfer' for module 'sui::transfer'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/dissolution/dissolution_actions.move:13:17
   [0m[34mâ”‚[0m
[0m[34m13[0m [0m[34mâ”‚[0m     tx_context::[0m[33mTxContext[0m,
   [0m[34mâ”‚[0m                 [0m[33m^^^^^^^^^[0m [0m[33mUnnecessary alias 'TxContext' for module member 'sui::tx_context::TxContext'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/dissolution/dissolution_actions.move:23:5
   [0m[34mâ”‚[0m
[0m[34m23[0m [0m[34mâ”‚[0m     [0m[33mfutarchy_vault[0m,
   [0m[34mâ”‚[0m     [0m[33m^^^^^^^^^^^^^^[0m [0m[33mUnused 'use' of alias 'futarchy_vault'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;9merror[E05001][0m[1m: ability constraint not satisfied[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../futarchy_specialized_actions/sources/payments/stream_dispatcher.move:120:9
    [0m[34mâ”‚[0m  
[0m[34m111[0m [0m[34mâ”‚[0m   public fun try_execute_typed_stream_action<CoinType, IW: drop, Outcome: store + drop + copy>(
    [0m[34mâ”‚[0m                                              [0m[34m--------[0m [0m[34mTo satisfy the constraint, the 'drop' ability would need to be added here[0m
    [0m[34mÂ·[0m  
[0m[34m120[0m [0m[34mâ”‚[0m [0m[31mâ•­[0m         [0m[31mstream_actions::do_create_payment<Outcome, CoinType, IW>([0m
    [0m[34mâ”‚[0m                                                      [0m[34m--------[0m [0m[34mThe type 'CoinType' does not have the ability 'drop'[0m
[0m[34m121[0m [0m[34mâ”‚[0m [0m[31mâ”‚[0m [0m[31m            executable,[0m
[0m[34m122[0m [0m[34mâ”‚[0m [0m[31mâ”‚[0m [0m[31m            account,[0m
[0m[34m123[0m [0m[34mâ”‚[0m [0m[31mâ”‚[0m [0m[31m            version::current(),[0m
    [0m[34mÂ·[0m [0m[31mâ”‚[0m
[0m[34m126[0m [0m[34mâ”‚[0m [0m[31mâ”‚[0m [0m[31m            ctx[0m
[0m[34m127[0m [0m[34mâ”‚[0m [0m[31mâ”‚[0m [0m[31m        )[0m;
    [0m[34mâ”‚[0m [0m[31mâ•°[0m[0m[31mâ”€â”€â”€â”€â”€â”€â”€â”€â”€^ 'drop' constraint not satisifed[0m
    [0m[34mâ”‚[0m  
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../futarchy_specialized_actions/sources/payments/stream_actions.move:575:56
    [0m[34mâ”‚[0m
[0m[34m575[0m [0m[34mâ”‚[0m public fun do_create_payment<Outcome: store, CoinType: drop, IW: drop>(
    [0m[34mâ”‚[0m                                                        [0m[34m----[0m [0m[34m'drop' constraint declared here[0m

[0m[1m[38;5;9merror[E05001][0m[1m: ability constraint not satisfied[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../futarchy_specialized_actions/sources/payments/stream_dispatcher.move:133:9
     [0m[34mâ”‚[0m  
[0m[34m 111[0m [0m[34mâ”‚[0m   public fun try_execute_typed_stream_action<CoinType, IW: drop, Outcome: store + drop + copy>(
     [0m[34mâ”‚[0m                                              [0m[34m--------[0m [0m[34mTo satisfy the constraint, the 'drop' ability would need to be added here[0m
     [0m[34mÂ·[0m  
[0m[34m 133[0m [0m[34mâ”‚[0m [0m[31mâ•­[0m         [0m[31mstream_actions::do_cancel_payment<Outcome, CoinType, IW>([0m
     [0m[34mâ”‚[0m                                                      [0m[34m--------[0m [0m[34mThe type 'CoinType' does not have the ability 'drop'[0m
[0m[34m 134[0m [0m[34mâ”‚[0m [0m[31mâ”‚[0m [0m[31m            executable,[0m
[0m[34m 135[0m [0m[34mâ”‚[0m [0m[31mâ”‚[0m [0m[31m            account,[0m
[0m[34m 136[0m [0m[34mâ”‚[0m [0m[31mâ”‚[0m [0m[31m            version::current(),[0m
     [0m[34mÂ·[0m [0m[31mâ”‚[0m
[0m[34m 139[0m [0m[34mâ”‚[0m [0m[31mâ”‚[0m [0m[31m            ctx[0m
[0m[34m 140[0m [0m[34mâ”‚[0m [0m[31mâ”‚[0m [0m[31m        )[0m;
     [0m[34mâ”‚[0m [0m[31mâ•°[0m[0m[31mâ”€â”€â”€â”€â”€â”€â”€â”€â”€^ 'drop' constraint not satisifed[0m
     [0m[34mâ”‚[0m  
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../futarchy_specialized_actions/sources/payments/stream_actions.move:1011:56
     [0m[34mâ”‚[0m
[0m[34m1011[0m [0m[34mâ”‚[0m public fun do_cancel_payment<Outcome: store, CoinType: drop, IW: drop>(
     [0m[34mâ”‚[0m                                                        [0m[34m----[0m [0m[34m'drop' constraint declared here[0m

[0m[1m[38;5;9merror[E05001][0m[1m: ability constraint not satisfied[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../futarchy_specialized_actions/sources/payments/stream_dispatcher.move:146:9
    [0m[34mâ”‚[0m  
[0m[34m111[0m [0m[34mâ”‚[0m   public fun try_execute_typed_stream_action<CoinType, IW: drop, Outcome: store + drop + copy>(
    [0m[34mâ”‚[0m                                              [0m[34m--------[0m [0m[34mTo satisfy the constraint, the 'drop' ability would need to be added here[0m
    [0m[34mÂ·[0m  
[0m[34m146[0m [0m[34mâ”‚[0m [0m[31mâ•­[0m         [0m[31mstream_actions::do_create_budget_stream<Outcome, CoinType, IW>([0m
    [0m[34mâ”‚[0m                                                            [0m[34m--------[0m [0m[34mThe type 'CoinType' does not have the ability 'drop'[0m
[0m[34m147[0m [0m[34mâ”‚[0m [0m[31mâ”‚[0m [0m[31m            executable,[0m
[0m[34m148[0m [0m[34mâ”‚[0m [0m[31mâ”‚[0m [0m[31m            account,[0m
[0m[34m149[0m [0m[34mâ”‚[0m [0m[31mâ”‚[0m [0m[31m            version::current(),[0m
    [0m[34mÂ·[0m [0m[31mâ”‚[0m
[0m[34m152[0m [0m[34mâ”‚[0m [0m[31mâ”‚[0m [0m[31m            ctx[0m
[0m[34m153[0m [0m[34mâ”‚[0m [0m[31mâ”‚[0m [0m[31m        )[0m;
    [0m[34mâ”‚[0m [0m[31mâ•°[0m[0m[31mâ”€â”€â”€â”€â”€â”€â”€â”€â”€^ 'drop' constraint not satisifed[0m
    [0m[34mâ”‚[0m  
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../futarchy_specialized_actions/sources/payments/stream_actions.move:733:62
    [0m[34mâ”‚[0m
[0m[34m733[0m [0m[34mâ”‚[0m public fun do_create_budget_stream<Outcome: store, CoinType: drop, IW: drop>(
    [0m[34mâ”‚[0m                                                              [0m[34m----[0m [0m[34m'drop' constraint declared here[0m

[0m[1m[38;5;9merror[E05001][0m[1m: ability constraint not satisfied[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../futarchy_specialized_actions/sources/payments/stream_dispatcher.move:159:9
    [0m[34mâ”‚[0m  
[0m[34m111[0m [0m[34mâ”‚[0m   public fun try_execute_typed_stream_action<CoinType, IW: drop, Outcome: store + drop + copy>(
    [0m[34mâ”‚[0m                                              [0m[34m--------[0m [0m[34mTo satisfy the constraint, the 'drop' ability would need to be added here[0m
    [0m[34mÂ·[0m  
[0m[34m159[0m [0m[34mâ”‚[0m [0m[31mâ•­[0m         [0m[31mstream_actions::do_execute_payment<Outcome, CoinType, IW>([0m
    [0m[34mâ”‚[0m                                                       [0m[34m--------[0m [0m[34mThe type 'CoinType' does not have the ability 'drop'[0m
[0m[34m160[0m [0m[34mâ”‚[0m [0m[31mâ”‚[0m [0m[31m            executable,[0m
[0m[34m161[0m [0m[34mâ”‚[0m [0m[31mâ”‚[0m [0m[31m            account,[0m
[0m[34m162[0m [0m[34mâ”‚[0m [0m[31mâ”‚[0m [0m[31m            version::current(),[0m
    [0m[34mÂ·[0m [0m[31mâ”‚[0m
[0m[34m165[0m [0m[34mâ”‚[0m [0m[31mâ”‚[0m [0m[31m            ctx[0m
[0m[34m166[0m [0m[34mâ”‚[0m [0m[31mâ”‚[0m [0m[31m        )[0m;
    [0m[34mâ”‚[0m [0m[31mâ•°[0m[0m[31mâ”€â”€â”€â”€â”€â”€â”€â”€â”€^ 'drop' constraint not satisifed[0m
    [0m[34mâ”‚[0m  
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../futarchy_specialized_actions/sources/payments/stream_actions.move:853:57
    [0m[34mâ”‚[0m
[0m[34m853[0m [0m[34mâ”‚[0m public fun do_execute_payment<Outcome: store, CoinType: drop, IW: drop>(
    [0m[34mâ”‚[0m                                                         [0m[34m----[0m [0m[34m'drop' constraint declared here[0m

[0m[1m[38;5;9merror[E04007][0m[1m: incompatible types[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../futarchy_specialized_actions/sources/payments/stream_actions.move:630:20
    [0m[34mâ”‚[0m
[0m[34m630[0m [0m[34mâ”‚[0m         let auth = [0m[31maccount::new_auth(account, FutarchyConfigWitness {})[0m;
    [0m[34mâ”‚[0m                    [0m[31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m
    [0m[34mâ”‚[0m                    [0m[31mâ”‚[0m                          [0m[34mâ”‚[0m
    [0m[34mâ”‚[0m                    [0m[31mâ”‚[0m                          [0m[34mGiven: 'futarchy_specialized_actions::stream_actions::FutarchyConfigWitness'[0m
    [0m[34mâ”‚[0m                    [0m[31mInvalid call of 'account_protocol::account::new_auth'. Invalid argument for parameter 'version_witness'[0m
    [0m[34mâ”‚[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../move-framework/packages/protocol/sources/account.move:367:22
    [0m[34mâ”‚[0m
[0m[34m367[0m [0m[34mâ”‚[0m     version_witness: VersionWitness,
    [0m[34mâ”‚[0m                      [0m[34m--------------[0m [0m[34mExpected: 'account_protocol::version_witness::VersionWitness'[0m

[0m[1m[38;5;9merror[E04016][0m[1m: too few arguments[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../futarchy_specialized_actions/sources/payments/stream_actions.move:630:20
    [0m[34mâ”‚[0m
[0m[34m630[0m [0m[34mâ”‚[0m         let auth = [0m[31maccount::new_auth(account, FutarchyConfigWitness {})[0m;
    [0m[34mâ”‚[0m                    [0m[31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m
    [0m[34mâ”‚[0m                    [0m[31mâ”‚[0m                [0m[34mâ”‚[0m
    [0m[34mâ”‚[0m                    [0m[31mâ”‚[0m                [0m[34mFound 2 argument(s) here[0m
    [0m[34mâ”‚[0m                    [0m[31mInvalid call of 'account_protocol::account::new_auth'. The call expected 3 argument(s) but got 2[0m
    [0m[34mâ”‚[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../move-framework/packages/protocol/sources/account.move:365:12
    [0m[34mâ”‚[0m
[0m[34m365[0m [0m[34mâ”‚[0m public fun new_auth<Config, CW: drop>(
    [0m[34mâ”‚[0m            [0m[34m--------[0m [0m[34mExpected 3 argument(s)[0m

[0m[1m[38;5;9merror[E04007][0m[1m: incompatible types[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../futarchy_specialized_actions/sources/payments/stream_actions.move:787:16
    [0m[34mâ”‚[0m
[0m[34m787[0m [0m[34mâ”‚[0m     let auth = [0m[31maccount::new_auth(account, FutarchyConfigWitness {})[0m;
    [0m[34mâ”‚[0m                [0m[31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m
    [0m[34mâ”‚[0m                [0m[31mâ”‚[0m                          [0m[34mâ”‚[0m
    [0m[34mâ”‚[0m                [0m[31mâ”‚[0m                          [0m[34mGiven: 'futarchy_specialized_actions::stream_actions::FutarchyConfigWitness'[0m
    [0m[34mâ”‚[0m                [0m[31mInvalid call of 'account_protocol::account::new_auth'. Invalid argument for parameter 'version_witness'[0m
    [0m[34mâ”‚[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../move-framework/packages/protocol/sources/account.move:367:22
    [0m[34mâ”‚[0m
[0m[34m367[0m [0m[34mâ”‚[0m     version_witness: VersionWitness,
    [0m[34mâ”‚[0m                      [0m[34m--------------[0m [0m[34mExpected: 'account_protocol::version_witness::VersionWitness'[0m

[0m[1m[38;5;9merror[E04016][0m[1m: too few arguments[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../futarchy_specialized_actions/sources/payments/stream_actions.move:787:16
    [0m[34mâ”‚[0m
[0m[34m787[0m [0m[34mâ”‚[0m     let auth = [0m[31maccount::new_auth(account, FutarchyConfigWitness {})[0m;
    [0m[34mâ”‚[0m                [0m[31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m
    [0m[34mâ”‚[0m                [0m[31mâ”‚[0m                [0m[34mâ”‚[0m
    [0m[34mâ”‚[0m                [0m[31mâ”‚[0m                [0m[34mFound 2 argument(s) here[0m
    [0m[34mâ”‚[0m                [0m[31mInvalid call of 'account_protocol::account::new_auth'. The call expected 3 argument(s) but got 2[0m
    [0m[34mâ”‚[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../move-framework/packages/protocol/sources/account.move:365:12
    [0m[34mâ”‚[0m
[0m[34m365[0m [0m[34mâ”‚[0m public fun new_auth<Config, CW: drop>(
    [0m[34mâ”‚[0m            [0m[34m--------[0m [0m[34mExpected 3 argument(s)[0m

[0m[1m[38;5;9merror[E04007][0m[1m: incompatible types[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../futarchy_specialized_actions/sources/payments/stream_actions.move:1037:20
     [0m[34mâ”‚[0m
[0m[34m1037[0m [0m[34mâ”‚[0m         let auth = [0m[31maccount::new_auth(account, FutarchyConfigWitness {})[0m;
     [0m[34mâ”‚[0m                    [0m[31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m
     [0m[34mâ”‚[0m                    [0m[31mâ”‚[0m                          [0m[34mâ”‚[0m
     [0m[34mâ”‚[0m                    [0m[31mâ”‚[0m                          [0m[34mGiven: 'futarchy_specialized_actions::stream_actions::FutarchyConfigWitness'[0m
     [0m[34mâ”‚[0m                    [0m[31mInvalid call of 'account_protocol::account::new_auth'. Invalid argument for parameter 'version_witness'[0m
     [0m[34mâ”‚[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../move-framework/packages/protocol/sources/account.move:367:22
     [0m[34mâ”‚[0m
[0m[34m 367[0m [0m[34mâ”‚[0m     version_witness: VersionWitness,
     [0m[34mâ”‚[0m                      [0m[34m--------------[0m [0m[34mExpected: 'account_protocol::version_witness::VersionWitness'[0m

[0m[1m[38;5;9merror[E04016][0m[1m: too few arguments[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../futarchy_specialized_actions/sources/payments/stream_actions.move:1037:20
     [0m[34mâ”‚[0m
[0m[34m1037[0m [0m[34mâ”‚[0m         let auth = [0m[31maccount::new_auth(account, FutarchyConfigWitness {})[0m;
     [0m[34mâ”‚[0m                    [0m[31m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m
     [0m[34mâ”‚[0m                    [0m[31mâ”‚[0m                [0m[34mâ”‚[0m
     [0m[34mâ”‚[0m                    [0m[31mâ”‚[0m                [0m[34mFound 2 argument(s) here[0m
     [0m[34mâ”‚[0m                    [0m[31mInvalid call of 'account_protocol::account::new_auth'. The call expected 3 argument(s) but got 2[0m
     [0m[34mâ”‚[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../move-framework/packages/protocol/sources/account.move:365:12
     [0m[34mâ”‚[0m
[0m[34m 365[0m [0m[34mâ”‚[0m public fun new_auth<Config, CW: drop>(
     [0m[34mâ”‚[0m            [0m[34m--------[0m [0m[34mExpected 3 argument(s)[0m

[0m[1m[38;5;9merror[E01002][0m[1m: unexpected token[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../futarchy_specialized_actions/sources/payments/stream_actions.move:1898:5
     [0m[34mâ”‚[0m
[0m[34m1898[0m [0m[34mâ”‚[0m     [0m[31mstruct[0m TempWitness has drop {}
     [0m[34mâ”‚[0m     [0m[31m^^^^^^[0m
     [0m[34mâ”‚[0m     [0m[31mâ”‚[0m
     [0m[34mâ”‚[0m     [0m[31mUnexpected 'struct'[0m
     [0m[34mâ”‚[0m     [0m[34mExpected an expression term[0m

[0m[1m[38;5;9merror[E01002][0m[1m: unexpected token[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../futarchy_specialized_actions/sources/payments/stream_actions.move:1901:5
     [0m[34mâ”‚[0m
[0m[34m1901[0m [0m[34mâ”‚[0m     [0m[31mlet[0m mut intent = intents::new_intent<FutarchyConfig, TempWitness>(
     [0m[34mâ”‚[0m     [0m[31m^^^[0m
     [0m[34mâ”‚[0m     [0m[31mâ”‚[0m
     [0m[34mâ”‚[0m     [0m[31mUnexpected 'let'[0m
     [0m[34mâ”‚[0m     [0m[34mExpected a module member: 'use', 'friend', 'const', 'fun', 'struct', or 'enum'[0m

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/dissolution/dissolution_intents.move:10:15
   [0m[34mâ”‚[0m
[0m[34m10[0m [0m[34mâ”‚[0m     intents::{[0m[33mSelf[0m, Intent},
   [0m[34mâ”‚[0m               [0m[33m^^^^[0m [0m[33mUnused 'use' of alias 'intents'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/dissolution/dissolution_intents.move:11:5
   [0m[34mâ”‚[0m
[0m[34m11[0m [0m[34mâ”‚[0m     [0m[33mmetadata[0m,
   [0m[34mâ”‚[0m     [0m[33m^^^^^^^^[0m [0m[33mUnused 'use' of alias 'metadata'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09010][0m[1m: unused function type parameter[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/dissolution/dissolution_intents.move:92:40
   [0m[34mâ”‚[0m
[0m[34m92[0m [0m[34mâ”‚[0m public fun create_prorata_distribution<[0m[33mCoinType[0m>(
   [0m[34mâ”‚[0m                                        [0m[33m^^^^^^^^[0m [0m[33mUnused type parameter 'CoinType'.[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_type_parameter)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

Failed to build Move modules: Compilation error.
