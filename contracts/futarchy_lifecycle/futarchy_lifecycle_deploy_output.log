[Note]: Dependency sources are no longer verified automatically during publication and upgrade. You can pass the `--verify-deps` option if you would like to verify them as part of publication or upgrade.
INCLUDING DEPENDENCY futarchy_multisig
INCLUDING DEPENDENCY futarchy_vault
INCLUDING DEPENDENCY AccountActions
INCLUDING DEPENDENCY Kiosk
INCLUDING DEPENDENCY futarchy_core
INCLUDING DEPENDENCY AccountProtocol
INCLUDING DEPENDENCY AccountExtensions
INCLUDING DEPENDENCY futarchy_markets
INCLUDING DEPENDENCY futarchy_one_shot_utils
INCLUDING DEPENDENCY Bridge
INCLUDING DEPENDENCY SuiSystem
INCLUDING DEPENDENCY Sui
INCLUDING DEPENDENCY MoveStdlib
BUILDING futarchy_lifecycle
[0m[1m[38;5;11mwarning[W01004][0m[1m: invalid documentation comment[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../futarchy_markets/sources/spot/spot_oracle_interface.move:199:1
    [0m[34mâ”‚[0m  
[0m[34m199[0m [0m[34mâ”‚[0m [0m[33mâ•­[0m [0m[33m/// Example: How a lending protocol would use this[0m
[0m[34m200[0m [0m[34mâ”‚[0m [0m[33mâ”‚[0m [0m[33m/// [0m
[0m[34m201[0m [0m[34mâ”‚[0m [0m[33mâ”‚[0m [0m[33m/// ```move[0m
[0m[34m202[0m [0m[34mâ”‚[0m [0m[33mâ”‚[0m [0m[33m/// // In lending protocol[0m
    [0m[34mÂ·[0m [0m[33mâ”‚[0m
[0m[34m217[0m [0m[34mâ”‚[0m [0m[33mâ”‚[0m [0m[33m/// [0m
[0m[34m218[0m [0m[34mâ”‚[0m [0m[33mâ”‚[0m [0m[33m/// It just gets a continuous price feed that never stops.[0m
    [0m[34mâ”‚[0m [0m[33mâ•°[0m[0m[33mâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€^ Documentation comment cannot be matched to a language item[0m

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:15:14
   [0m[34mâ”‚[0m
[0m[34m15[0m [0m[34mâ”‚[0m     option::{[0m[33mSelf[0m, Option},
   [0m[34mâ”‚[0m              [0m[33m^^^^[0m [0m[33mUnnecessary alias 'option' for module 'std::option'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:15:20
   [0m[34mâ”‚[0m
[0m[34m15[0m [0m[34mâ”‚[0m     option::{Self, [0m[33mOption[0m},
   [0m[34mâ”‚[0m                    [0m[33m^^^^^^[0m [0m[33mUnnecessary alias 'Option' for module member 'std::option::Option'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:16:5
   [0m[34mâ”‚[0m
[0m[34m16[0m [0m[34mâ”‚[0m     [0m[33mvector[0m,
   [0m[34mâ”‚[0m     [0m[33m^^^^^^[0m [0m[33mUnnecessary alias 'vector' for module 'std::vector'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:17:23
   [0m[34mâ”‚[0m
[0m[34m17[0m [0m[34mâ”‚[0m     type_name::{Self, [0m[33mTypeName[0m},
   [0m[34mâ”‚[0m                       [0m[33m^^^^^^^^[0m [0m[33mUnused 'use' of alias 'TypeName'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:25:14
   [0m[34mâ”‚[0m
[0m[34m25[0m [0m[34mâ”‚[0m     object::{[0m[33mSelf[0m, ID},
   [0m[34mâ”‚[0m              [0m[33m^^^^[0m [0m[33mUnnecessary alias 'object' for module 'sui::object'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:25:20
   [0m[34mâ”‚[0m
[0m[34m25[0m [0m[34mâ”‚[0m     object::{Self, [0m[33mID[0m},
   [0m[34mâ”‚[0m                    [0m[33m^^[0m [0m[33mUnnecessary alias 'ID' for module member 'sui::object::ID'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:26:5
   [0m[34mâ”‚[0m
[0m[34m26[0m [0m[34mâ”‚[0m     [0m[33mtransfer[0m,
   [0m[34mâ”‚[0m     [0m[33m^^^^^^^^[0m [0m[33mUnnecessary alias 'transfer' for module 'sui::transfer'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:27:10
   [0m[34mâ”‚[0m
[0m[34m27[0m [0m[34mâ”‚[0m     bag::[0m[33mBag[0m,
   [0m[34mâ”‚[0m          [0m[33m^^^[0m [0m[33mUnused 'use' of alias 'Bag'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:28:17
   [0m[34mâ”‚[0m
[0m[34m28[0m [0m[34mâ”‚[0m     tx_context::[0m[33mTxContext[0m,
   [0m[34mâ”‚[0m                 [0m[33m^^^^^^^^^[0m [0m[33mUnnecessary alias 'TxContext' for module member 'sui::tx_context::TxContext'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:34:37
   [0m[34mâ”‚[0m
[0m[34m34[0m [0m[34mâ”‚[0m use account_actions::{vault::{Self, [0m[33mVault[0m, VaultKey}, vault_intents};
   [0m[34mâ”‚[0m                                     [0m[33m^^^^^[0m [0m[33mUnused 'use' of alias 'Vault'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:34:44
   [0m[34mâ”‚[0m
[0m[34m34[0m [0m[34mâ”‚[0m use account_actions::{vault::{Self, Vault, [0m[33mVaultKey[0m}, vault_intents};
   [0m[34mâ”‚[0m                                            [0m[33m^^^^^^^^[0m [0m[33mUnused 'use' of alias 'VaultKey'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:34:55
   [0m[34mâ”‚[0m
[0m[34m34[0m [0m[34mâ”‚[0m use account_actions::{vault::{Self, Vault, VaultKey}, [0m[33mvault_intents[0m};
   [0m[34mâ”‚[0m                                                       [0m[33m^^^^^^^^^^^^^[0m [0m[33mUnused 'use' of alias 'vault_intents'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:36:30
   [0m[34mâ”‚[0m
[0m[34m36[0m [0m[34mâ”‚[0m     account::{Self, Account, [0m[33mAuth[0m},
   [0m[34mâ”‚[0m                              [0m[33m^^^^[0m [0m[33mUnused 'use' of alias 'Auth'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:39:5
   [0m[34mâ”‚[0m
[0m[34m39[0m [0m[34mâ”‚[0m     [0m[33mintents[0m,
   [0m[34mâ”‚[0m     [0m[33m^^^^^^^[0m [0m[33mUnused 'use' of alias 'intents'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09011][0m[1m: unused constant[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:45:7
   [0m[34mâ”‚[0m
[0m[34m45[0m [0m[34mâ”‚[0m const [0m[33mEStreamNotActive[0m: u64 = 3;
   [0m[34mâ”‚[0m       [0m[33m^^^^^^^^^^^^^^^^[0m [0m[33mThe constant 'EStreamNotActive' is never used. Consider removing it.[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_const)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09011][0m[1m: unused constant[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:48:7
   [0m[34mâ”‚[0m
[0m[34m48[0m [0m[34mâ”‚[0m const [0m[33mEStreamNotFound[0m: u64 = 6;
   [0m[34mâ”‚[0m       [0m[33m^^^^^^^^^^^^^^^[0m [0m[33mThe constant 'EStreamNotFound' is never used. Consider removing it.[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_const)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09011][0m[1m: unused constant[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:49:7
   [0m[34mâ”‚[0m
[0m[34m49[0m [0m[34mâ”‚[0m const [0m[33mEUnauthorizedAction[0m: u64 = 7;
   [0m[34mâ”‚[0m       [0m[33m^^^^^^^^^^^^^^^^^^^[0m [0m[33mThe constant 'EUnauthorizedAction' is never used. Consider removing it.[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_const)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09011][0m[1m: unused constant[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:52:7
   [0m[34mâ”‚[0m
[0m[34m52[0m [0m[34mâ”‚[0m const [0m[33mEStreamFullyClaimed[0m: u64 = 10;
   [0m[34mâ”‚[0m       [0m[33m^^^^^^^^^^^^^^^^^^^[0m [0m[33mThe constant 'EStreamFullyClaimed' is never used. Consider removing it.[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_const)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09011][0m[1m: unused constant[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:74:7
   [0m[34mâ”‚[0m
[0m[34m74[0m [0m[34mâ”‚[0m const [0m[33mDEFAULT_PENDING_PERIOD_MS[0m: u64 = 604_800_000; // 7 days in milliseconds
   [0m[34mâ”‚[0m       [0m[33m^^^^^^^^^^^^^^^^^^^^^^^^^[0m [0m[33mThe constant 'DEFAULT_PENDING_PERIOD_MS' is never used. Consider removing it.[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_const)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:374:5
    [0m[34mâ”‚[0m
[0m[34m374[0m [0m[34mâ”‚[0m     [0m[33mctx[0m: &mut TxContext,
    [0m[34mâ”‚[0m     [0m[33m^^^[0m [0m[33mUnused parameter 'ctx'. Consider removing or prefixing with an underscore: '_ctx'[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:463:5
    [0m[34mâ”‚[0m
[0m[34m463[0m [0m[34mâ”‚[0m     [0m[33mctx[0m: &mut TxContext,
    [0m[34mâ”‚[0m     [0m[33m^^^[0m [0m[33mUnused parameter 'ctx'. Consider removing or prefixing with an underscore: '_ctx'[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:580:5
    [0m[34mâ”‚[0m
[0m[34m580[0m [0m[34mâ”‚[0m     [0m[33mversion_witness[0m: VersionWitness,
    [0m[34mâ”‚[0m     [0m[33m^^^^^^^^^^^^^^^[0m [0m[33mUnused parameter 'version_witness'. Consider removing or prefixing with an underscore: '_version_witness'[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:858:5
    [0m[34mâ”‚[0m
[0m[34m858[0m [0m[34mâ”‚[0m     [0m[33mversion_witness[0m: VersionWitness,
    [0m[34mâ”‚[0m     [0m[33m^^^^^^^^^^^^^^^[0m [0m[33mUnused parameter 'version_witness'. Consider removing or prefixing with an underscore: '_version_witness'[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:868:10
    [0m[34mâ”‚[0m
[0m[34m868[0m [0m[34mâ”‚[0m     let ([0m[33mis_active[0m, source_mode, has_vault_stream, mut vault_stream_id, claimable, sender_authorized) = {
    [0m[34mâ”‚[0m          [0m[33m^^^^^^^^^[0m [0m[33mUnused local variable 'is_active'. Consider removing or prefixing with an underscore: '_is_active'[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99001][0m[1m: non-composable transfer to sender[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:955:5
    [0m[34mâ”‚[0m
[0m[34m855[0m [0m[34mâ”‚[0m public fun do_execute_payment<Outcome: store, CoinType: drop, IW: copy + drop>(
    [0m[34mâ”‚[0m            [0m[34m------------------[0m [0m[34mReturning an object from a function, allows a caller to use the object and enables composability via programmable transactions.[0m
    [0m[34mÂ·[0m
[0m[34m938[0m [0m[34mâ”‚[0m     let sender = ctx.sender();
    [0m[34mâ”‚[0m                  [0m[34m------------[0m [0m[34mTransaction sender address coming from here[0m
    [0m[34mÂ·[0m
[0m[34m955[0m [0m[34mâ”‚[0m     [0m[33mtransfer::public_transfer(payment_coin, sender)[0m;
    [0m[34mâ”‚[0m     [0m[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m [0m[33mTransfer of an object to transaction sender address[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(self_transfer))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:1013:9
     [0m[34mâ”‚[0m
[0m[34m1013[0m [0m[34mâ”‚[0m     let [0m[33msource_mode[0m = payment.source_mode;
     [0m[34mâ”‚[0m         [0m[33m^^^^^^^^^^^[0m [0m[33mUnused local variable 'source_mode'. Consider removing or prefixing with an underscore: '_source_mode'[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:1041:5
     [0m[34mâ”‚[0m
[0m[34m1041[0m [0m[34mâ”‚[0m     [0m[33mversion_witness[0m: VersionWitness,
     [0m[34mâ”‚[0m     [0m[33m^^^^^^^^^^^^^^^[0m [0m[33mUnused parameter 'version_witness'. Consider removing or prefixing with an underscore: '_version_witness'[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99001][0m[1m: non-composable transfer to sender[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:1088:13
     [0m[34mâ”‚[0m
[0m[34m1038[0m [0m[34mâ”‚[0m public fun do_cancel_payment<Outcome: store, CoinType: drop, IW: copy + drop>(
     [0m[34mâ”‚[0m            [0m[34m-----------------[0m [0m[34mReturning an object from a function, allows a caller to use the object and enables composability via programmable transactions.[0m
     [0m[34mÂ·[0m
[0m[34m1088[0m [0m[34mâ”‚[0m             [0m[33mtransfer::public_transfer(refund_coin, tx_context::sender(ctx))[0m;
     [0m[34mâ”‚[0m             [0m[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m
     [0m[34mâ”‚[0m             [0m[33mâ”‚[0m                                      [0m[34mâ”‚[0m
     [0m[34mâ”‚[0m             [0m[33mâ”‚[0m                                      [0m[34mTransaction sender address coming from here[0m
     [0m[34mâ”‚[0m             [0m[33mTransfer of an object to transaction sender address[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(lint(self_transfer))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:1282:5
     [0m[34mâ”‚[0m
[0m[34m1282[0m [0m[34mâ”‚[0m     [0m[33mversion_witness[0m: VersionWitness,
     [0m[34mâ”‚[0m     [0m[33m^^^^^^^^^^^^^^^[0m [0m[33mUnused parameter 'version_witness'. Consider removing or prefixing with an underscore: '_version_witness'[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:1330:5
     [0m[34mâ”‚[0m
[0m[34m1330[0m [0m[34mâ”‚[0m     [0m[33mversion_witness[0m: VersionWitness,
     [0m[34mâ”‚[0m     [0m[33m^^^^^^^^^^^^^^^[0m [0m[33mUnused parameter 'version_witness'. Consider removing or prefixing with an underscore: '_version_witness'[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:1332:5
     [0m[34mâ”‚[0m
[0m[34m1332[0m [0m[34mâ”‚[0m     [0m[33mclock[0m: &Clock,
     [0m[34mâ”‚[0m     [0m[33m^^^^^[0m [0m[33mUnused parameter 'clock'. Consider removing or prefixing with an underscore: '_clock'[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:1333:5
     [0m[34mâ”‚[0m
[0m[34m1333[0m [0m[34mâ”‚[0m     [0m[33mctx[0m: &mut TxContext,
     [0m[34mâ”‚[0m     [0m[33m^^^[0m [0m[33mUnused parameter 'ctx'. Consider removing or prefixing with an underscore: '_ctx'[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:1367:5
     [0m[34mâ”‚[0m
[0m[34m1367[0m [0m[34mâ”‚[0m     [0m[33mversion_witness[0m: VersionWitness,
     [0m[34mâ”‚[0m     [0m[33m^^^^^^^^^^^^^^^[0m [0m[33mUnused parameter 'version_witness'. Consider removing or prefixing with an underscore: '_version_witness'[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:1370:5
     [0m[34mâ”‚[0m
[0m[34m1370[0m [0m[34mâ”‚[0m     [0m[33mctx[0m: &mut TxContext,
     [0m[34mâ”‚[0m     [0m[33m^^^[0m [0m[33mUnused parameter 'ctx'. Consider removing or prefixing with an underscore: '_ctx'[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:1418:5
     [0m[34mâ”‚[0m
[0m[34m1418[0m [0m[34mâ”‚[0m     [0m[33mversion_witness[0m: VersionWitness,
     [0m[34mâ”‚[0m     [0m[33m^^^^^^^^^^^^^^^[0m [0m[33mUnused parameter 'version_witness'. Consider removing or prefixing with an underscore: '_version_witness'[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:1421:5
     [0m[34mâ”‚[0m
[0m[34m1421[0m [0m[34mâ”‚[0m     [0m[33mctx[0m: &mut TxContext,
     [0m[34mâ”‚[0m     [0m[33m^^^[0m [0m[33mUnused parameter 'ctx'. Consider removing or prefixing with an underscore: '_ctx'[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:1611:9
     [0m[34mâ”‚[0m
[0m[34m1611[0m [0m[34mâ”‚[0m     let [0m[33maccount_id[0m = object::id(account);
     [0m[34mâ”‚[0m         [0m[33m^^^^^^^^^^[0m [0m[33mUnused local variable 'account_id'. Consider removing or prefixing with an underscore: '_account_id'[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:1793:5
     [0m[34mâ”‚[0m
[0m[34m1793[0m [0m[34mâ”‚[0m     [0m[33mctx[0m: &mut TxContext,
     [0m[34mâ”‚[0m     [0m[33m^^^[0m [0m[33mUnused parameter 'ctx'. Consider removing or prefixing with an underscore: '_ctx'[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W04037][0m[1m: deprecated usage[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:1948:75
     [0m[34mâ”‚[0m
[0m[34m1948[0m [0m[34mâ”‚[0m             let return_key = DissolutionReturnKey { coin_type: type_name::[0m[33mget[0m<CoinType>() };
     [0m[34mâ”‚[0m                                                                           [0m[33m^^^[0m [0m[33mThe function 'std::type_name::get' is deprecated: Renamed to `with_defining_ids` for clarity.[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(deprecated_usage)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W04037][0m[1m: deprecated usage[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:1966:35
     [0m[34mâ”‚[0m
[0m[34m1966[0m [0m[34mâ”‚[0m             coin_type: type_name::[0m[33mget[0m<CoinType>().into_string().to_string(),
     [0m[34mâ”‚[0m                                   [0m[33m^^^[0m [0m[33mThe function 'std::type_name::get' is deprecated: Renamed to `with_defining_ids` for clarity.[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(deprecated_usage)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:1978:5
     [0m[34mâ”‚[0m
[0m[34m1978[0m [0m[34mâ”‚[0m     [0m[33maccount[0m: &mut Account<FutarchyConfig>,
     [0m[34mâ”‚[0m     [0m[33m^^^^^^^[0m [0m[33mUnused parameter 'account'. Consider removing or prefixing with an underscore: '_account'[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09014][0m[1m: unused mutable reference '&mut' parameter[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:1978:14
     [0m[34mâ”‚[0m
[0m[34m1978[0m [0m[34mâ”‚[0m     account: [0m[33m&mut Account<FutarchyConfig>[0m,
     [0m[34mâ”‚[0m     [0m[34m-------[0m  [0m[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m [0m[33mMutable reference is never used mutably, consider switching to an immutable reference '&' instead[0m
     [0m[34mâ”‚[0m     [0m[34mâ”‚[0m         
     [0m[34mâ”‚[0m     [0m[34mFor parameters, this can be silenced by prefixing the name with an underscore, e.g. '_account'[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(unused_mut_parameter)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:1979:5
     [0m[34mâ”‚[0m
[0m[34m1979[0m [0m[34mâ”‚[0m     [0m[33mvault_name[0m: String,
     [0m[34mâ”‚[0m     [0m[33m^^^^^^^^^^[0m [0m[33mUnused parameter 'vault_name'. Consider removing or prefixing with an underscore: '_vault_name'[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:1980:5
     [0m[34mâ”‚[0m
[0m[34m1980[0m [0m[34mâ”‚[0m     [0m[33mamount[0m: u64,
     [0m[34mâ”‚[0m     [0m[33m^^^^^^[0m [0m[33mUnused parameter 'amount'. Consider removing or prefixing with an underscore: '_amount'[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:2062:14
     [0m[34mâ”‚[0m
[0m[34m  14[0m [0m[34mâ”‚[0m     string::{Self, String},
     [0m[34mâ”‚[0m              [0m[34m----[0m [0m[34mThe same alias was previously declared here[0m
     [0m[34mÂ·[0m
[0m[34m2062[0m [0m[34mâ”‚[0m     use std::[0m[33mstring[0m;
     [0m[34mâ”‚[0m              [0m[33m^^^^^^[0m [0m[33mUnnecessary alias 'string' for module 'std::string'. It was already in scope[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_actions.move:2063:14
     [0m[34mâ”‚[0m
[0m[34m  25[0m [0m[34mâ”‚[0m     object::{Self, ID},
     [0m[34mâ”‚[0m              [0m[34m----[0m [0m[34mThe same alias was previously declared here[0m
     [0m[34mÂ·[0m
[0m[34m2063[0m [0m[34mâ”‚[0m     use sui::[0m[33mobject[0m;
     [0m[34mâ”‚[0m              [0m[33m^^^^^^[0m [0m[33mUnnecessary alias 'object' for module 'sui::object'. It was already in scope[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:6:27
  [0m[34mâ”‚[0m
[0m[34m6[0m [0m[34mâ”‚[0m use std::option::{Self as [0m[33moption[0m, Option};
  [0m[34mâ”‚[0m                           [0m[33m^^^^^^[0m [0m[33mUnnecessary alias 'option' for module 'std::option'. This alias is provided by default[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:6:35
  [0m[34mâ”‚[0m
[0m[34m6[0m [0m[34mâ”‚[0m use std::option::{Self as option, [0m[33mOption[0m};
  [0m[34mâ”‚[0m                                   [0m[33m^^^^^^[0m [0m[33mUnnecessary alias 'Option' for module member 'std::option::Option'. This alias is provided by default[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:7:10
  [0m[34mâ”‚[0m
[0m[34m7[0m [0m[34mâ”‚[0m use std::[0m[33mvector[0m;
  [0m[34mâ”‚[0m          [0m[33m^^^^^^[0m [0m[33mUnnecessary alias 'vector' for module 'std::vector'. This alias is provided by default[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:13:19
   [0m[34mâ”‚[0m
[0m[34m13[0m [0m[34mâ”‚[0m use sui::object::{[0m[33mSelf[0m, UID, ID};
   [0m[34mâ”‚[0m                   [0m[33m^^^^[0m [0m[33mUnnecessary alias 'object' for module 'sui::object'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:13:25
   [0m[34mâ”‚[0m
[0m[34m13[0m [0m[34mâ”‚[0m use sui::object::{Self, [0m[33mUID[0m, ID};
   [0m[34mâ”‚[0m                         [0m[33m^^^[0m [0m[33mUnnecessary alias 'UID' for module member 'sui::object::UID'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:13:30
   [0m[34mâ”‚[0m
[0m[34m13[0m [0m[34mâ”‚[0m use sui::object::{Self, UID, [0m[33mID[0m};
   [0m[34mâ”‚[0m                              [0m[33m^^[0m [0m[33mUnnecessary alias 'ID' for module member 'sui::object::ID'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:14:22
   [0m[34mâ”‚[0m
[0m[34m14[0m [0m[34mâ”‚[0m use sui::tx_context::[0m[33mTxContext[0m;
   [0m[34mâ”‚[0m                      [0m[33m^^^^^^^^^[0m [0m[33mUnnecessary alias 'TxContext' for module member 'sui::tx_context::TxContext'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09011][0m[1m: unused constant[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:31:7
   [0m[34mâ”‚[0m
[0m[34m31[0m [0m[34mâ”‚[0m const [0m[33mENotUSDC[0m: u64 = 12;
   [0m[34mâ”‚[0m       [0m[33m^^^^^^^^[0m [0m[33mThe constant 'ENotUSDC' is never used. Consider removing it.[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_const)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09009][0m[1m: unused struct field[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:195:5
    [0m[34mâ”‚[0m
[0m[34m195[0m [0m[34mâ”‚[0m     [0m[33mraise_id[0m: ID,
    [0m[34mâ”‚[0m     [0m[33m^^^^^^^^[0m [0m[33mThe 'raise_id' field of the 'ContributionAdded' type is unused[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(unused_field)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09009][0m[1m: unused struct field[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:196:5
    [0m[34mâ”‚[0m
[0m[34m196[0m [0m[34mâ”‚[0m     [0m[33mcontributor[0m: address,
    [0m[34mâ”‚[0m     [0m[33m^^^^^^^^^^^[0m [0m[33mThe 'contributor' field of the 'ContributionAdded' type is unused[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(unused_field)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09009][0m[1m: unused struct field[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:197:5
    [0m[34mâ”‚[0m
[0m[34m197[0m [0m[34mâ”‚[0m     [0m[33mamount[0m: u64,
    [0m[34mâ”‚[0m     [0m[33m^^^^^^[0m [0m[33mThe 'amount' field of the 'ContributionAdded' type is unused[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(unused_field)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09009][0m[1m: unused struct field[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:198:5
    [0m[34mâ”‚[0m
[0m[34m198[0m [0m[34mâ”‚[0m     [0m[33mnew_total_raised[0m: u64,
    [0m[34mâ”‚[0m     [0m[33m^^^^^^^^^^^^^^^^[0m [0m[33mThe 'new_total_raised' field of the 'ContributionAdded' type is unused[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(unused_field)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:268:8
    [0m[34mâ”‚[0m
[0m[34m268[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun create_raise_with_founder_rewards<RaiseToken: drop, StableCoin: drop>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:318:9
    [0m[34mâ”‚[0m
[0m[34m318[0m [0m[34mâ”‚[0m     let [0m[33mtokens_for_sale_amount[0m = if (with_founder_rewards) {
    [0m[34mâ”‚[0m         [0m[33m^^^^^^^^^^^^^^^^^^^^^^[0m [0m[33mUnused local variable 'tokens_for_sale_amount'. Consider removing or prefixing with an underscore: '_tokens_for_sale_amount'[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:345:8
    [0m[34mâ”‚[0m
[0m[34m345[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun create_raise<RaiseToken: drop, StableCoin: drop>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:386:8
    [0m[34mâ”‚[0m
[0m[34m386[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun contribute_with_cap<RaiseToken, StableCoin>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:452:8
    [0m[34mâ”‚[0m
[0m[34m452[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun contribute<RaiseToken, StableCoin>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:464:8
    [0m[34mâ”‚[0m
[0m[34m464[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun update_cap<RaiseToken, StableCoin>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09008][0m[1m: unused function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:518:5
    [0m[34mâ”‚[0m
[0m[34m518[0m [0m[34mâ”‚[0m fun [0m[33mparent[0m(i: u64): u64 { if (i == 0) 0 else (i - 1) / 2 }
    [0m[34mâ”‚[0m     [0m[33m^^^^^^[0m [0m[33mThe non-'public', non-'entry' function 'parent' is never called. Consider removing it.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(unused_function)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:602:8
    [0m[34mâ”‚[0m
[0m[34m602[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun crank_settlement<RT, SC>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:681:8
    [0m[34mâ”‚[0m
[0m[34m681[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun start_settlement<RT, SC>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99000][0m[1m: possible owned object share[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:687:5
    [0m[34mâ”‚[0m
[0m[34m105[0m [0m[34mâ”‚[0m public struct CapSettlement has key, store {
    [0m[34mâ”‚[0m                                      [0m[34m-----[0m [0m[34mPotentially an owned object because 'store' grants access to public transfers[0m
    [0m[34mÂ·[0m
[0m[34m574[0m [0m[34mâ”‚[0m ): CapSettlement {
    [0m[34mâ”‚[0m    [0m[34m-------------[0m [0m[34mA potentially owned object coming from here[0m
    [0m[34mÂ·[0m
[0m[34m687[0m [0m[34mâ”‚[0m     [0m[33mtransfer::public_share_object(settlement)[0m;
    [0m[34mâ”‚[0m     [0m[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m
    [0m[34mâ”‚[0m     [0m[33mâ”‚[0m                             [0m[34mâ”‚[0m
    [0m[34mâ”‚[0m     [0m[33mâ”‚[0m                             [0m[34mCreating a fresh object and sharing it within the same function will ensure this does not abort.[0m
    [0m[34mâ”‚[0m     [0m[33mPotential abort from a (potentially) owned object created by a different transaction.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(share_owned))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:691:8
    [0m[34mâ”‚[0m
[0m[34m691[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun complete_settlement<RT, SC>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:700:8
    [0m[34mâ”‚[0m
[0m[34m700[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun claim_success_and_create_dao<RaiseToken: drop, StableCoin: drop>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:790:8
    [0m[34mâ”‚[0m
[0m[34m790[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun claim_tokens<RaiseToken, StableCoin>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:838:8
    [0m[34mâ”‚[0m
[0m[34m838[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun claim_refund_ineligible<RaiseToken, StableCoin>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:874:8
    [0m[34mâ”‚[0m
[0m[34m874[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun claim_refund<RaiseToken, StableCoin>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:923:8
    [0m[34mâ”‚[0m
[0m[34m923[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun sweep_dust<RaiseToken, StableCoin>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W04037][0m[1m: deprecated usage[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:979:38
    [0m[34mâ”‚[0m
[0m[34m979[0m [0m[34mâ”‚[0m         raise_token_type: type_name::[0m[33mget[0m<RaiseToken>().into_string().to_string(),
    [0m[34mâ”‚[0m                                      [0m[33m^^^[0m [0m[33mThe function 'std::type_name::get' is deprecated: Renamed to `with_defining_ids` for clarity.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(deprecated_usage)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W04037][0m[1m: deprecated usage[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:980:38
    [0m[34mâ”‚[0m
[0m[34m980[0m [0m[34mâ”‚[0m         stable_coin_type: type_name::[0m[33mget[0m<StableCoin>().into_string().to_string(),
    [0m[34mâ”‚[0m                                      [0m[33m^^^[0m [0m[33mThe function 'std::type_name::get' is deprecated: Renamed to `with_defining_ids` for clarity.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(deprecated_usage)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W04037][0m[1m: deprecated usage[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:1025:38
     [0m[34mâ”‚[0m
[0m[34m1025[0m [0m[34mâ”‚[0m         raise_token_type: type_name::[0m[33mget[0m<RaiseToken>().into_string().to_string(),
     [0m[34mâ”‚[0m                                      [0m[33m^^^[0m [0m[33mThe function 'std::type_name::get' is deprecated: Renamed to `with_defining_ids` for clarity.[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(deprecated_usage)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W04037][0m[1m: deprecated usage[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad.move:1026:38
     [0m[34mâ”‚[0m
[0m[34m1026[0m [0m[34mâ”‚[0m         stable_coin_type: type_name::[0m[33mget[0m<StableCoin>().into_string().to_string(),
     [0m[34mâ”‚[0m                                      [0m[33m^^^[0m [0m[33mThe function 'std::type_name::get' is deprecated: Renamed to `with_defining_ids` for clarity.[0m
     [0m[34mâ”‚[0m
     [0m[34m=[0m This warning can be suppressed with '#[allow(deprecated_usage)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W01004][0m[1m: invalid documentation comment[0m
     [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/../futarchy_core/sources/futarchy_config.move:1143:1
     [0m[34mâ”‚[0m  
[0m[34m1143[0m [0m[34mâ”‚[0m [0m[33mâ•­[0m [0m[33m/// Execute a proposal's intent with generic outcome type[0m
[0m[34m1144[0m [0m[34mâ”‚[0m [0m[33mâ”‚[0m [0m[33m/// Execute a proposal's intent with generic outcome type[0m
[0m[34m1145[0m [0m[34mâ”‚[0m [0m[33mâ”‚[0m [0m[33m/// This allows standard intents to work with any outcome type[0m
     [0m[34mâ”‚[0m [0m[33mâ•°[0m[0m[33mâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€^ Documentation comment cannot be matched to a language item[0m

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:4:19
  [0m[34mâ”‚[0m
[0m[34m4[0m [0m[34mâ”‚[0m use std::string::{[0m[33mSelf[0m, String};
  [0m[34mâ”‚[0m                   [0m[33m^^^^[0m [0m[33mUnused 'use' of alias 'string'. Consider removing it[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:5:10
  [0m[34mâ”‚[0m
[0m[34m5[0m [0m[34mâ”‚[0m use std::[0m[33mvector[0m;
  [0m[34mâ”‚[0m          [0m[33m^^^^^^[0m [0m[33mUnnecessary alias 'vector' for module 'std::vector'. This alias is provided by default[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:6:19
  [0m[34mâ”‚[0m
[0m[34m6[0m [0m[34mâ”‚[0m use std::option::{[0m[33mSelf[0m, Option};
  [0m[34mâ”‚[0m                   [0m[33m^^^^[0m [0m[33mUnnecessary alias 'option' for module 'std::option'. This alias is provided by default[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:6:25
  [0m[34mâ”‚[0m
[0m[34m6[0m [0m[34mâ”‚[0m use std::option::{Self, [0m[33mOption[0m};
  [0m[34mâ”‚[0m                         [0m[33m^^^^^^[0m [0m[33mUnnecessary alias 'Option' for module member 'std::option::Option'. This alias is provided by default[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:7:17
  [0m[34mâ”‚[0m
[0m[34m7[0m [0m[34mâ”‚[0m use sui::coin::{[0m[33mSelf[0m, Coin};
  [0m[34mâ”‚[0m                 [0m[33m^^^^[0m [0m[33mUnused 'use' of alias 'coin'. Consider removing it[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:7:23
  [0m[34mâ”‚[0m
[0m[34m7[0m [0m[34mâ”‚[0m use sui::coin::{Self, [0m[33mCoin[0m};
  [0m[34mâ”‚[0m                       [0m[33m^^^^[0m [0m[33mUnused 'use' of alias 'Coin'. Consider removing it[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:9:10
  [0m[34mâ”‚[0m
[0m[34m9[0m [0m[34mâ”‚[0m use sui::[0m[33mtransfer[0m;
  [0m[34mâ”‚[0m          [0m[33m^^^^^^^^[0m [0m[33mUnnecessary alias 'transfer' for module 'sui::transfer'. This alias is provided by default[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:10:22
   [0m[34mâ”‚[0m
[0m[34m10[0m [0m[34mâ”‚[0m use sui::tx_context::[0m[33mTxContext[0m;
   [0m[34mâ”‚[0m                      [0m[33m^^^^^^^^^[0m [0m[33mUnnecessary alias 'TxContext' for module member 'sui::tx_context::TxContext'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:11:19
   [0m[34mâ”‚[0m
[0m[34m11[0m [0m[34mâ”‚[0m use sui::object::{[0m[33mSelf[0m, ID};
   [0m[34mâ”‚[0m                   [0m[33m^^^^[0m [0m[33mUnnecessary alias 'object' for module 'sui::object'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:11:19
   [0m[34mâ”‚[0m
[0m[34m11[0m [0m[34mâ”‚[0m use sui::object::{[0m[33mSelf[0m, ID};
   [0m[34mâ”‚[0m                   [0m[33m^^^^[0m [0m[33mUnused 'use' of alias 'object'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:11:25
   [0m[34mâ”‚[0m
[0m[34m11[0m [0m[34mâ”‚[0m use sui::object::{Self, [0m[33mID[0m};
   [0m[34mâ”‚[0m                         [0m[33m^^[0m [0m[33mUnnecessary alias 'ID' for module member 'sui::object::ID'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:14:24
   [0m[34mâ”‚[0m
[0m[34m14[0m [0m[34mâ”‚[0m     intents::{Expired, [0m[33mIntent[0m},
   [0m[34mâ”‚[0m                        [0m[33m^^^^^^[0m [0m[33mUnused 'use' of alias 'Intent'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:16:15
   [0m[34mâ”‚[0m
[0m[34m16[0m [0m[34mâ”‚[0m     account::{[0m[33mSelf[0m, Account},
   [0m[34mâ”‚[0m               [0m[33m^^^^[0m [0m[33mUnused 'use' of alias 'account'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:22:5
   [0m[34mâ”‚[0m
[0m[34m22[0m [0m[34mâ”‚[0m     [0m[33mversion[0m,
   [0m[34mâ”‚[0m     [0m[33m^^^^^^^[0m [0m[33mUnused 'use' of alias 'version'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:26:5
   [0m[34mâ”‚[0m
[0m[34m26[0m [0m[34mâ”‚[0m     [0m[33mspot_conditional_quoter[0m,
   [0m[34mâ”‚[0m     [0m[33m^^^^^^^^^^^^^^^^^^^^^^^[0m [0m[33mUnused 'use' of alias 'spot_conditional_quoter'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:27:15
   [0m[34mâ”‚[0m
[0m[34m27[0m [0m[34mâ”‚[0m     proposal::[0m[33mProposal[0m,
   [0m[34mâ”‚[0m               [0m[33m^^^^^^^^[0m [0m[33mUnused 'use' of alias 'Proposal'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:28:5
   [0m[34mâ”‚[0m
[0m[34m28[0m [0m[34mâ”‚[0m     [0m[33mconditional_amm[0m,
   [0m[34mâ”‚[0m     [0m[33m^^^^^^^^^^^^^^^[0m [0m[33mUnused 'use' of alias 'conditional_amm'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:31:25
   [0m[34mâ”‚[0m
[0m[34m31[0m [0m[34mâ”‚[0m     weighted_multisig::{[0m[33mSelf[0m, WeightedMultisig},
   [0m[34mâ”‚[0m                         [0m[33m^^^^[0m [0m[33mUnused 'use' of alias 'weighted_multisig'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:31:31
   [0m[34mâ”‚[0m
[0m[34m31[0m [0m[34mâ”‚[0m     weighted_multisig::{Self, [0m[33mWeightedMultisig[0m},
   [0m[34mâ”‚[0m                               [0m[33m^^^^^^^^^^^^^^^^[0m [0m[33mUnused 'use' of alias 'WeightedMultisig'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09011][0m[1m: unused constant[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:37:7
   [0m[34mâ”‚[0m
[0m[34m37[0m [0m[34mâ”‚[0m const [0m[33mEInvalidRecipient[0m: u64 = 2;
   [0m[34mâ”‚[0m       [0m[33m^^^^^^^^^^^^^^^^^[0m [0m[33mThe constant 'EInvalidRecipient' is never used. Consider removing it.[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_const)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09011][0m[1m: unused constant[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:40:7
   [0m[34mâ”‚[0m
[0m[34m40[0m [0m[34mâ”‚[0m const [0m[33mEExceedsMaxSupply[0m: u64 = 5;
   [0m[34mâ”‚[0m       [0m[33m^^^^^^^^^^^^^^^^^[0m [0m[33mThe constant 'EExceedsMaxSupply' is never used. Consider removing it.[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_const)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09011][0m[1m: unused constant[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:49:7
   [0m[34mâ”‚[0m
[0m[34m49[0m [0m[34mâ”‚[0m const [0m[33mEInvalidSecurityCouncil[0m: u64 = 14;
   [0m[34mâ”‚[0m       [0m[33m^^^^^^^^^^^^^^^^^^^^^^^[0m [0m[33mThe constant 'EInvalidSecurityCouncil' is never used. Consider removing it.[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_const)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09011][0m[1m: unused constant[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:50:7
   [0m[34mâ”‚[0m
[0m[34m50[0m [0m[34mâ”‚[0m const [0m[33mERecipientNotFound[0m: u64 = 15;
   [0m[34mâ”‚[0m       [0m[33m^^^^^^^^^^^^^^^^^^[0m [0m[33mThe constant 'ERecipientNotFound' is never used. Consider removing it.[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_const)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09008][0m[1m: unused function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/oracle/oracle_actions.move:627:5
    [0m[34mâ”‚[0m
[0m[34m627[0m [0m[34mâ”‚[0m fun [0m[33msafe_mul_div_u64[0m(a: u64, b: u64, c: u64): u64 {
    [0m[34mâ”‚[0m     [0m[33m^^^^^^^^^^^^^^^^[0m [0m[33mThe non-'public', non-'entry' function 'safe_mul_div_u64' is never called. Consider removing it.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(unused_function)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad_rewards.move:5:10
  [0m[34mâ”‚[0m
[0m[34m5[0m [0m[34mâ”‚[0m use std::[0m[33mvector[0m;
  [0m[34mâ”‚[0m          [0m[33m^^^^^^[0m [0m[33mUnnecessary alias 'vector' for module 'std::vector'. This alias is provided by default[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad_rewards.move:6:19
  [0m[34mâ”‚[0m
[0m[34m6[0m [0m[34mâ”‚[0m use std::option::{[0m[33mSelf[0m, Option};
  [0m[34mâ”‚[0m                   [0m[33m^^^^[0m [0m[33mUnnecessary alias 'option' for module 'std::option'. This alias is provided by default[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad_rewards.move:6:25
  [0m[34mâ”‚[0m
[0m[34m6[0m [0m[34mâ”‚[0m use std::option::{Self, [0m[33mOption[0m};
  [0m[34mâ”‚[0m                         [0m[33m^^^^^^[0m [0m[33mUnnecessary alias 'Option' for module member 'std::option::Option'. This alias is provided by default[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad_rewards.move:6:25
  [0m[34mâ”‚[0m
[0m[34m6[0m [0m[34mâ”‚[0m use std::option::{Self, [0m[33mOption[0m};
  [0m[34mâ”‚[0m                         [0m[33m^^^^^^[0m [0m[33mUnused 'use' of alias 'Option'. Consider removing it[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad_rewards.move:9:22
  [0m[34mâ”‚[0m
[0m[34m9[0m [0m[34mâ”‚[0m use sui::tx_context::[0m[33mTxContext[0m;
  [0m[34mâ”‚[0m                      [0m[33m^^^^^^^^^[0m [0m[33mUnnecessary alias 'TxContext' for module member 'sui::tx_context::TxContext'. This alias is provided by default[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09002][0m[1m: unused variable[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad_rewards.move:63:5
   [0m[34mâ”‚[0m
[0m[34m63[0m [0m[34mâ”‚[0m     [0m[33mctx[0m: &mut TxContext,
   [0m[34mâ”‚[0m     [0m[33m^^^[0m [0m[33mUnused parameter 'ctx'. Consider removing or prefixing with an underscore: '_ctx'[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09014][0m[1m: unused mutable reference '&mut' parameter[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/launchpad_rewards.move:63:10
   [0m[34mâ”‚[0m
[0m[34m63[0m [0m[34mâ”‚[0m     ctx: [0m[33m&mut TxContext[0m,
   [0m[34mâ”‚[0m     [0m[34m---[0m  [0m[33m^^^^^^^^^^^^^^[0m [0m[33mMutable reference is never used mutably, consider switching to an immutable reference '&' instead[0m
   [0m[34mâ”‚[0m     [0m[34mâ”‚[0m     
   [0m[34mâ”‚[0m     [0m[34mFor parameters, this can be silenced by prefixing the name with an underscore, e.g. '_ctx'[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_mut_parameter)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:10:14
   [0m[34mâ”‚[0m
[0m[34m10[0m [0m[34mâ”‚[0m     option::{[0m[33mSelf[0m, Option},
   [0m[34mâ”‚[0m              [0m[33m^^^^[0m [0m[33mUnnecessary alias 'option' for module 'std::option'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:10:20
   [0m[34mâ”‚[0m
[0m[34m10[0m [0m[34mâ”‚[0m     option::{Self, [0m[33mOption[0m},
   [0m[34mâ”‚[0m                    [0m[33m^^^^^^[0m [0m[33mUnnecessary alias 'Option' for module member 'std::option::Option'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:14:12
   [0m[34mâ”‚[0m
[0m[34m14[0m [0m[34mâ”‚[0m     coin::{[0m[33mSelf[0m, Coin, TreasuryCap},
   [0m[34mâ”‚[0m            [0m[33m^^^^[0m [0m[33mUnused 'use' of alias 'coin'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:16:14
   [0m[34mâ”‚[0m
[0m[34m16[0m [0m[34mâ”‚[0m     object::{[0m[33mSelf[0m, ID, UID},
   [0m[34mâ”‚[0m              [0m[33m^^^^[0m [0m[33mUnnecessary alias 'object' for module 'sui::object'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:16:20
   [0m[34mâ”‚[0m
[0m[34m16[0m [0m[34mâ”‚[0m     object::{Self, [0m[33mID[0m, UID},
   [0m[34mâ”‚[0m                    [0m[33m^^[0m [0m[33mUnnecessary alias 'ID' for module member 'sui::object::ID'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:16:24
   [0m[34mâ”‚[0m
[0m[34m16[0m [0m[34mâ”‚[0m     object::{Self, ID, [0m[33mUID[0m},
   [0m[34mâ”‚[0m                        [0m[33m^^^[0m [0m[33mUnnecessary alias 'UID' for module member 'sui::object::UID'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:19:5
   [0m[34mâ”‚[0m
[0m[34m19[0m [0m[34mâ”‚[0m     [0m[33mtransfer[0m,
   [0m[34mâ”‚[0m     [0m[33m^^^^^^^^[0m [0m[33mUnnecessary alias 'transfer' for module 'sui::transfer'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:23:21
   [0m[34mâ”‚[0m
[0m[34m23[0m [0m[34mâ”‚[0m     account::{Self, [0m[33mAccount[0m},
   [0m[34mâ”‚[0m                     [0m[33m^^^^^^^[0m [0m[33mUnused 'use' of alias 'Account'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:29:29
   [0m[34mâ”‚[0m
[0m[34m29[0m [0m[34mâ”‚[0m     futarchy_config::{Self, [0m[33mFutarchyConfig[0m, ConfigParams},
   [0m[34mâ”‚[0m                             [0m[33m^^^^^^^^^^^^^^[0m [0m[33mUnused 'use' of alias 'FutarchyConfig'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:29:45
   [0m[34mâ”‚[0m
[0m[34m29[0m [0m[34mâ”‚[0m     futarchy_config::{Self, FutarchyConfig, [0m[33mConfigParams[0m},
   [0m[34mâ”‚[0m                                             [0m[33m^^^^^^^^^^^^[0m [0m[33mUnused 'use' of alias 'ConfigParams'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:30:5
   [0m[34mâ”‚[0m
[0m[34m30[0m [0m[34mâ”‚[0m     [0m[33mdao_config[0m,
   [0m[34mâ”‚[0m     [0m[33m^^^^^^^^^^[0m [0m[33mUnused 'use' of alias 'dao_config'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:36:43
   [0m[34mâ”‚[0m
[0m[34m36[0m [0m[34mâ”‚[0m use futarchy_core::priority_queue::{Self, [0m[33mProposalQueue[0m};
   [0m[34mâ”‚[0m                                           [0m[33m^^^^^^^^^^^^^[0m [0m[33mUnused 'use' of alias 'ProposalQueue'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:39:31
   [0m[34mâ”‚[0m
[0m[34m39[0m [0m[34mâ”‚[0m     account_spot_pool::{Self, [0m[33mAccountSpotPool[0m},
   [0m[34mâ”‚[0m                               [0m[33m^^^^^^^^^^^^^^^[0m [0m[33mUnused 'use' of alias 'AccountSpotPool'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:140:8
    [0m[34mâ”‚[0m
[0m[34m140[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun create_dao<AssetType: drop, StableType>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W04037][0m[1m: deprecated usage[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:219:39
    [0m[34mâ”‚[0m
[0m[34m219[0m [0m[34mâ”‚[0m     let stable_type_name = type_name::[0m[33mget[0m<StableType>();
    [0m[34mâ”‚[0m                                       [0m[33m^^^[0m [0m[33mThe function 'std::type_name::get' is deprecated: Renamed to `with_defining_ids` for clarity.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(deprecated_usage)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:530:8
    [0m[34mâ”‚[0m
[0m[34m530[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun toggle_pause(factory: &mut Factory, cap: &FactoryOwnerCap) {
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:536:8
    [0m[34mâ”‚[0m
[0m[34m536[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun add_allowed_stable_type<StableType>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W04037][0m[1m: deprecated usage[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:543:36
    [0m[34mâ”‚[0m
[0m[34m543[0m [0m[34mâ”‚[0m     let type_name_val = type_name::[0m[33mget[0m<StableType>();
    [0m[34mâ”‚[0m                                    [0m[33m^^^[0m [0m[33mThe function 'std::type_name::get' is deprecated: Renamed to `with_defining_ids` for clarity.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(deprecated_usage)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:557:8
    [0m[34mâ”‚[0m
[0m[34m557[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun remove_allowed_stable_type<StableType>(
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W04037][0m[1m: deprecated usage[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:564:36
    [0m[34mâ”‚[0m
[0m[34m564[0m [0m[34mâ”‚[0m     let type_name_val = type_name::[0m[33mget[0m<StableType>();
    [0m[34mâ”‚[0m                                    [0m[33m^^^[0m [0m[33mThe function 'std::type_name::get' is deprecated: Renamed to `with_defining_ids` for clarity.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(deprecated_usage)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99010][0m[1m: unnecessary `entry` on a `public` function[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:577:8
    [0m[34mâ”‚[0m
[0m[34m577[0m [0m[34mâ”‚[0m public [0m[33mentry[0m fun burn_factory_owner_cap(factory: &Factory, cap: FactoryOwnerCap) {
    [0m[34mâ”‚[0m        [0m[33m^^^^^[0m [0m[33m`entry` on `public` functions limits composability as it adds restrictions, e.g. the type of each return value must have `drop`. `entry` on `public` is only meaningful in niche scenarios.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m `public` functions can be called from PTBs. `entry` can be used to allow non-`public` functions to be called from PTBs, but it adds restrictions on the usage of input arguments and on the type of return values. Unless this `public` function interacts with an intricate set of other `entry` functions, the `entry` modifier should be removed.
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(public_entry))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W04037][0m[1m: deprecated usage[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:599:36
    [0m[34mâ”‚[0m
[0m[34m599[0m [0m[34mâ”‚[0m     let type_name_val = type_name::[0m[33mget[0m<StableType>();
    [0m[34mâ”‚[0m                                    [0m[33m^^^[0m [0m[33mThe function 'std::type_name::get' is deprecated: Renamed to `with_defining_ids` for clarity.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(deprecated_usage)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W04037][0m[1m: deprecated usage[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/factory/factory.move:606:36
    [0m[34mâ”‚[0m
[0m[34m606[0m [0m[34mâ”‚[0m     let type_name_obj = type_name::[0m[33mget_with_original_ids[0m<T>();
    [0m[34mâ”‚[0m                                    [0m[33m^^^^^^^^^^^^^^^^^^^^^[0m [0m[33mThe function 'std::type_name::get_with_original_ids' is deprecated: Renamed to `with_original_ids` for clarity.[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(deprecated_usage)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/dissolution/dissolution_actions.move:9:15
  [0m[34mâ”‚[0m
[0m[34m9[0m [0m[34mâ”‚[0m     balance::{[0m[33mSelf[0m, Balance},
  [0m[34mâ”‚[0m               [0m[33m^^^^[0m [0m[33mUnused 'use' of alias 'balance'. Consider removing it[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/dissolution/dissolution_actions.move:9:21
  [0m[34mâ”‚[0m
[0m[34m9[0m [0m[34mâ”‚[0m     balance::{Self, [0m[33mBalance[0m},
  [0m[34mâ”‚[0m                     [0m[33m^^^^^^^[0m [0m[33mUnused 'use' of alias 'Balance'. Consider removing it[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/dissolution/dissolution_actions.move:10:13
   [0m[34mâ”‚[0m
[0m[34m10[0m [0m[34mâ”‚[0m     object::[0m[33mID[0m,
   [0m[34mâ”‚[0m             [0m[33m^^[0m [0m[33mUnnecessary alias 'ID' for module member 'sui::object::ID'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/dissolution/dissolution_actions.move:11:5
   [0m[34mâ”‚[0m
[0m[34m11[0m [0m[34mâ”‚[0m     [0m[33mtransfer[0m,
   [0m[34mâ”‚[0m     [0m[33m^^^^^^^^[0m [0m[33mUnnecessary alias 'transfer' for module 'sui::transfer'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/dissolution/dissolution_actions.move:13:17
   [0m[34mâ”‚[0m
[0m[34m13[0m [0m[34mâ”‚[0m     tx_context::[0m[33mTxContext[0m,
   [0m[34mâ”‚[0m                 [0m[33m^^^^^^^^^[0m [0m[33mUnnecessary alias 'TxContext' for module member 'sui::tx_context::TxContext'. This alias is provided by default[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/dissolution/dissolution_actions.move:23:5
   [0m[34mâ”‚[0m
[0m[34m23[0m [0m[34mâ”‚[0m     [0m[33mfutarchy_vault[0m,
   [0m[34mâ”‚[0m     [0m[33m^^^^^^^^^^^^^^[0m [0m[33mUnused 'use' of alias 'futarchy_vault'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[Lint W99001][0m[1m: non-composable transfer to sender[0m
    [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/dissolution/dissolution_actions.move:453:9
    [0m[34mâ”‚[0m
[0m[34m387[0m [0m[34mâ”‚[0m public fun do_distribute_assets<Outcome: store, CoinType, IW: drop>(
    [0m[34mâ”‚[0m            [0m[34m--------------------[0m [0m[34mReturning an object from a function, allows a caller to use the object and enables composability via programmable transactions.[0m
    [0m[34mÂ·[0m
[0m[34m453[0m [0m[34mâ”‚[0m         [0m[33mtransfer::public_transfer(distribution_coin, ctx.sender())[0m;
    [0m[34mâ”‚[0m         [0m[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m
    [0m[34mâ”‚[0m         [0m[33mâ”‚[0m                                            [0m[34mâ”‚[0m
    [0m[34mâ”‚[0m         [0m[33mâ”‚[0m                                            [0m[34mTransaction sender address coming from here[0m
    [0m[34mâ”‚[0m         [0m[33mTransfer of an object to transaction sender address[0m
    [0m[34mâ”‚[0m
    [0m[34m=[0m This warning can be suppressed with '#[allow(lint(self_transfer))]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_intents.move:9:13
  [0m[34mâ”‚[0m
[0m[34m9[0m [0m[34mâ”‚[0m     option::[0m[33mOption[0m,
  [0m[34mâ”‚[0m             [0m[33m^^^^^^[0m [0m[33mUnnecessary alias 'Option' for module member 'std::option::Option'. This alias is provided by default[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/dissolution/dissolution_intents.move:10:15
   [0m[34mâ”‚[0m
[0m[34m10[0m [0m[34mâ”‚[0m     intents::{[0m[33mSelf[0m, Intent},
   [0m[34mâ”‚[0m               [0m[33m^^^^[0m [0m[33mUnused 'use' of alias 'intents'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09001][0m[1m: unused alias[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/dissolution/dissolution_intents.move:11:5
   [0m[34mâ”‚[0m
[0m[34m11[0m [0m[34mâ”‚[0m     [0m[33mmetadata[0m,
   [0m[34mâ”‚[0m     [0m[33m^^^^^^^^[0m [0m[33mUnused 'use' of alias 'metadata'. Consider removing it[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_use)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W09010][0m[1m: unused function type parameter[0m
   [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/dissolution/dissolution_intents.move:92:40
   [0m[34mâ”‚[0m
[0m[34m92[0m [0m[34mâ”‚[0m public fun create_prorata_distribution<[0m[33mCoinType[0m>(
   [0m[34mâ”‚[0m                                        [0m[33m^^^^^^^^[0m [0m[33mUnused type parameter 'CoinType'.[0m
   [0m[34mâ”‚[0m
   [0m[34m=[0m This warning can be suppressed with '#[allow(unused_type_parameter)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

[0m[1m[38;5;11mwarning[W02021][0m[1m: duplicate alias[0m
  [0m[34mâ”Œâ”€[0m /Users/admin/monorepo/contracts/futarchy_lifecycle/sources/payments/stream_dispatcher.move:7:17
  [0m[34mâ”‚[0m
[0m[34m7[0m [0m[34mâ”‚[0m     tx_context::[0m[33mTxContext[0m,
  [0m[34mâ”‚[0m                 [0m[33m^^^^^^^^^[0m [0m[33mUnnecessary alias 'TxContext' for module member 'sui::tx_context::TxContext'. This alias is provided by default[0m
  [0m[34mâ”‚[0m
  [0m[34m=[0m This warning can be suppressed with '#[allow(duplicate_alias)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

Please report feedback on the linter warnings at https://forums.sui.io

Total number of linter warnings suppressed: 3 (unique lints: 2)
Skipping dependency verification
Error executing transaction 'G9NVYaAQWWYrkAuUTmRhfkcs7wcLamiVWBxTKikmC7Tk': PublishUpgradeMissingDependency in command 0
