name: Selective Railway Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - staging
          - production
      reset_database:
        description: 'Reset database before backend deploy'
        required: false
        type: boolean
        default: false
      deploy_backend:
        description: 'Deploy Backend (API, Indexer, Poller, Bot)'
        required: false
        type: boolean
        default: false
      deploy_frontend:
        description: 'Deploy Frontend'
        required: false
        type: boolean
        default: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Railway CLI
        run: npm install -g @railway/cli
      
      - name: Deploy Backend
        if: ${{ github.event.inputs.deploy_backend == 'true' }}
        run: |
          echo "Deploying Backend to ${{ github.event.inputs.environment }}"
          
          # Set DB_RESET_ON_DEPLOY based on user input
          if [ "${{ github.event.inputs.reset_database }}" == "true" ]; then
            railway variables set DB_RESET_ON_DEPLOY=true -e ${{ github.event.inputs.environment }} -s backend
          else
            railway variables set DB_RESET_ON_DEPLOY=false -e ${{ github.event.inputs.environment }} -s backend
          fi
          
          railway up -e ${{ github.event.inputs.environment }} -s backend
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      
      - name: Deploy Frontend
        if: ${{ github.event.inputs.deploy_frontend == 'true' }}
        run: |
          echo "Deploying Frontend to ${{ github.event.inputs.environment }}"
          railway up -e ${{ github.event.inputs.environment }} -s frontend
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}