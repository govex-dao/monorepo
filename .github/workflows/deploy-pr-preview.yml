name: Deploy PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    # This creates the deployment button in the PR UI
    environment:
      name: preview-testnet-branch
      url: https://frontend-testnet-branch.railway.app
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy all services to testnet-branch
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_BRANCH }}
        run: |
          echo "Deploying PR #${{ github.event.pull_request.number }} to testnet-branch"
          
          # Set environment variables
          export NETWORK="testnet-branch"
          export DB_RESET_ON_DEPLOY="false"
          # DATABASE_URL is already set by Railway
          
          # Deploy all services in parallel
          for service in api bot indexer poller; do
            echo "Deploying $service..."
            railway up \
              --service $service \
              --environment testnet-branch \
              --config railway.$service.json &
          done
          
          # Deploy frontend
          echo "Deploying frontend..."
          railway up \
            --service frontend \
            --environment testnet-branch &
          
          # Wait for all deployments
          wait
          echo "All services deployed successfully!"

      - name: Comment deployment URL
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = 'https://frontend-testnet-branch.railway.app';
            const comment = `### ðŸš€ Preview Deployment Ready!\n\n**URL**: ${deploymentUrl}\n**Environment**: testnet-branch\n**PR**: #${{ github.event.pull_request.number }}\n\nAll services have been deployed successfully.`;
            
            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Preview Deployment Ready')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }