name: Deploy PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  deployments: write
  pull-requests: write

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    # Only run for org members or repo collaborators
    if: |
      github.event.pull_request.author_association == 'MEMBER' ||
      github.event.pull_request.author_association == 'OWNER' ||
      github.event.pull_request.author_association == 'COLLABORATOR'
    environment: 
      name: pr-preview-${{ github.event.pull_request.number }}
      url: https://pr-${{ github.event.pull_request.number }}-frontend.railway.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.sha,
              environment: `pr-preview-${context.payload.pull_request.number}`,
              description: 'Deploy PR preview to Railway',
              auto_merge: false,
              required_contexts: []
            });
            core.setOutput('id', deployment.data.id);

      - name: Set deployment status to in progress
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.id }},
              state: 'in_progress',
              environment_url: `https://pr-${{ github.event.pull_request.number }}-frontend.railway.app`
            });

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Deploy to Railway
        id: railway-deploy
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          # Create PR-specific services
          PR_NUMBER=${{ github.event.pull_request.number }}
          
          # Deploy with PR-specific service names
          railway up --service backend-pr-${PR_NUMBER} --environment staging --detach
          railway up --service frontend-pr-${PR_NUMBER} --environment staging --detach

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const state = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.id }},
              state: state,
              environment_url: `https://pr-${{ github.event.pull_request.number }}-frontend.railway.app`
            });

      - name: Comment on PR
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `### ðŸš€ Preview Deployment Ready!
            
            | Service | URL |
            |---------|-----|
            | Frontend | https://pr-${{ github.event.pull_request.number }}-frontend.railway.app |
            | Backend | https://pr-${{ github.event.pull_request.number }}-backend.railway.app |
            
            _This preview will be automatically updated when you push new commits._`;
            
            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Preview Deployment Ready')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }